// Generated by TinyPG v1.3 available at www.codeproject.com

#pragma warning disable IDE0017 // Simplify object initialization
#pragma warning disable IDE0028 // Simplify collection initialization
#pragma warning disable IDE0044 // Add readonly modifier
#pragma warning disable IDE0059
#pragma warning disable CRRSP01 // A misspelled word has been found
#pragma warning disable CRR0046
#pragma warning disable CRR0047
#pragma warning disable CRR0052

using System;
using System.Collections.Generic;
using System.Text.RegularExpressions;
using System.Xml.Serialization;

namespace SpreadCommander.Common.Parsers.ConsoleScript
{
    #region Scanner

    public partial class Scanner
    {
        public string Input;
        public int StartPos = 0;
        public int EndPos = 0;
        public int CurrentLine;
        public int CurrentColumn;
        public int CurrentPosition;
        public List<Token> Skipped; // tokens that were skipped
        public Dictionary<TokenType, Regex> Patterns;

        private Token LookAheadToken;
        private List<TokenType> Tokens;
        private List<TokenType> SkipList; // tokens to be skipped

        public Scanner()
        {
            Regex regex;
            Patterns = new Dictionary<TokenType, Regex>();
            Tokens = new List<TokenType>();
            LookAheadToken = null;
            Skipped = new List<Token>();

            SkipList = new List<TokenType>();
            SkipList.Add(TokenType.WHITESPACE);
            SkipList.Add(TokenType.COMMENTLINE);
            SkipList.Add(TokenType.COMMENTBLOCK);

            regex = new Regex(@"(?-m)$", RegexOptions.None);
            Patterns.Add(TokenType.EOF, regex);
            Tokens.Add(TokenType.EOF);

            regex = new Regex(@"\G\s+", RegexOptions.None);
            Patterns.Add(TokenType.WHITESPACE, regex);
            Tokens.Add(TokenType.WHITESPACE);

            regex = new Regex(@"\G--[^\n]*\n?", RegexOptions.None);
            Patterns.Add(TokenType.COMMENTLINE, regex);
            Tokens.Add(TokenType.COMMENTLINE);

            regex = new Regex(@"\G/\*[^*]*\*+(?:[^/*][^*]*\*+)*/", RegexOptions.None);
            Patterns.Add(TokenType.COMMENTBLOCK, regex);
            Tokens.Add(TokenType.COMMENTBLOCK);

            regex = new Regex(@"\G-?[0-9]+", RegexOptions.None);
            Patterns.Add(TokenType.NUMBER, regex);
            Tokens.Add(TokenType.NUMBER);

            regex = new Regex(@"\G\+|-", RegexOptions.None);
            Patterns.Add(TokenType.PLUSMINUS, regex);
            Tokens.Add(TokenType.PLUSMINUS);

            regex = new Regex(@"\G\*|/", RegexOptions.None);
            Patterns.Add(TokenType.MULTDIV, regex);
            Tokens.Add(TokenType.MULTDIV);

            regex = new Regex(@"\G\(", RegexOptions.None);
            Patterns.Add(TokenType.BR_OPEN, regex);
            Tokens.Add(TokenType.BR_OPEN);

            regex = new Regex(@"\G\)", RegexOptions.None);
            Patterns.Add(TokenType.BR_CLOSE, regex);
            Tokens.Add(TokenType.BR_CLOSE);

            regex = new Regex(@"\G,", RegexOptions.None);
            Patterns.Add(TokenType.COMMA, regex);
            Tokens.Add(TokenType.COMMA);

            regex = new Regex(@"\G;", RegexOptions.None);
            Patterns.Add(TokenType.SEMICOLON, regex);
            Tokens.Add(TokenType.SEMICOLON);

            regex = new Regex(@"\G-", RegexOptions.None);
            Patterns.Add(TokenType.DEFICE, regex);
            Tokens.Add(TokenType.DEFICE);

            regex = new Regex(@"\G[\w\._]+", RegexOptions.None);
            Patterns.Add(TokenType.IDENT, regex);
            Tokens.Add(TokenType.IDENT);

            regex = new Regex(@"\G\[(?:[^\]]|\]\])*\]", RegexOptions.None);
            Patterns.Add(TokenType.IDENT_BRACED, regex);
            Tokens.Add(TokenType.IDENT_BRACED);

            regex = new Regex(@"\G\""(?:[^\""]|\""\"")*\""", RegexOptions.None);
            Patterns.Add(TokenType.IDENT_QUOTED, regex);
            Tokens.Add(TokenType.IDENT_QUOTED);

            regex = new Regex(@"\G\'(?:[^\']|\'\')*\'", RegexOptions.None);
            Patterns.Add(TokenType.IDENT_STRING, regex);
            Tokens.Add(TokenType.IDENT_STRING);

            regex = new Regex(@"\G`(?:[^`]|``)*`", RegexOptions.None);
            Patterns.Add(TokenType.IDENT_STRING2, regex);
            Tokens.Add(TokenType.IDENT_STRING2);

            regex = new Regex(@"\G=", RegexOptions.None);
            Patterns.Add(TokenType.COMPARE_EQUAL, regex);
            Tokens.Add(TokenType.COMPARE_EQUAL);

            regex = new Regex(@"\G<>", RegexOptions.None);
            Patterns.Add(TokenType.COMPARE_NOT_EQUAL, regex);
            Tokens.Add(TokenType.COMPARE_NOT_EQUAL);

            regex = new Regex(@"\G<", RegexOptions.None);
            Patterns.Add(TokenType.COMPARE_LESS, regex);
            Tokens.Add(TokenType.COMPARE_LESS);

            regex = new Regex(@"\G>", RegexOptions.None);
            Patterns.Add(TokenType.COMPARE_GREATER, regex);
            Tokens.Add(TokenType.COMPARE_GREATER);

            regex = new Regex(@"\G<=", RegexOptions.None);
            Patterns.Add(TokenType.COMPARE_LESS_OR_EQUAL, regex);
            Tokens.Add(TokenType.COMPARE_LESS_OR_EQUAL);

            regex = new Regex(@"\G>=", RegexOptions.None);
            Patterns.Add(TokenType.COMPARE_GREATER_OR_EQUAL, regex);
            Tokens.Add(TokenType.COMPARE_GREATER_OR_EQUAL);

            regex = new Regex(@"\G(?i)BETWEEN", RegexOptions.None);
            Patterns.Add(TokenType.COMPARE_BETWEEN, regex);
            Tokens.Add(TokenType.COMPARE_BETWEEN);

            regex = new Regex(@"\G(?i)CONTAINS", RegexOptions.None);
            Patterns.Add(TokenType.COMPARE_CONTAINS, regex);
            Tokens.Add(TokenType.COMPARE_CONTAINS);

            regex = new Regex(@"\G(?i)STARTS", RegexOptions.None);
            Patterns.Add(TokenType.COMPARE_STARTS, regex);
            Tokens.Add(TokenType.COMPARE_STARTS);

            regex = new Regex(@"\G(?i)ENDS", RegexOptions.None);
            Patterns.Add(TokenType.COMPARE_ENDS, regex);
            Tokens.Add(TokenType.COMPARE_ENDS);

            regex = new Regex(@"\G(?i)MATCHES", RegexOptions.None);
            Patterns.Add(TokenType.COMPARE_MATCHES, regex);
            Tokens.Add(TokenType.COMPARE_MATCHES);

            regex = new Regex(@"\G(?i)(?:STRING|VARCHAR|CHAR|TEXT)", RegexOptions.None);
            Patterns.Add(TokenType.STRING, regex);
            Tokens.Add(TokenType.STRING);

            regex = new Regex(@"\G(?i)(?:INTEGER|INT)", RegexOptions.None);
            Patterns.Add(TokenType.INTEGER, regex);
            Tokens.Add(TokenType.INTEGER);

            regex = new Regex(@"\G(?i)(?:DECIMAL|NUMERIC|DOUBLE|FLOAT)", RegexOptions.None);
            Patterns.Add(TokenType.DECIMAL, regex);
            Tokens.Add(TokenType.DECIMAL);

            regex = new Regex(@"\G(?i)(?:DATETIME|DATE)", RegexOptions.None);
            Patterns.Add(TokenType.DATETIME, regex);
            Tokens.Add(TokenType.DATETIME);

            regex = new Regex(@"\G(?i)(?:BOOLEAN|BOOL|BIT)", RegexOptions.None);
            Patterns.Add(TokenType.BOOLEAN, regex);
            Tokens.Add(TokenType.BOOLEAN);

            regex = new Regex(@"\G(?i)INSERT", RegexOptions.None);
            Patterns.Add(TokenType.INSERT, regex);
            Tokens.Add(TokenType.INSERT);

            regex = new Regex(@"\G(?i)FILE", RegexOptions.None);
            Patterns.Add(TokenType.FILE, regex);
            Tokens.Add(TokenType.FILE);

            regex = new Regex(@"\G(?i)(?:TEXT|HTML|CSV|JSON|ADO.NET|XML|SQL|POWERSHELL|FLUSH|CLEAR)", RegexOptions.None);
            Patterns.Add(TokenType.OUTPUT_TYPE, regex);
            Tokens.Add(TokenType.OUTPUT_TYPE);

            regex = new Regex(@"\G(?i)FORMAT", RegexOptions.None);
            Patterns.Add(TokenType.FORMAT, regex);
            Tokens.Add(TokenType.FORMAT);

            regex = new Regex(@"\G(?i)CONDITION", RegexOptions.None);
            Patterns.Add(TokenType.CONDITION, regex);
            Tokens.Add(TokenType.CONDITION);

            regex = new Regex(@"\G(?i)WITH", RegexOptions.None);
            Patterns.Add(TokenType.WITH, regex);
            Tokens.Add(TokenType.WITH);

            regex = new Regex(@"\G(?i)FOR", RegexOptions.None);
            Patterns.Add(TokenType.FOR, regex);
            Tokens.Add(TokenType.FOR);

            regex = new Regex(@"\G(?i)COLUMN", RegexOptions.None);
            Patterns.Add(TokenType.COLUMN, regex);
            Tokens.Add(TokenType.COLUMN);

            regex = new Regex(@"\G(?i)VIEW", RegexOptions.None);
            Patterns.Add(TokenType.VIEW, regex);
            Tokens.Add(TokenType.VIEW);

            regex = new Regex(@"\G(?i)TABLE", RegexOptions.None);
            Patterns.Add(TokenType.TABLE, regex);
            Tokens.Add(TokenType.TABLE);

            regex = new Regex(@"\G(?i)RELATION", RegexOptions.None);
            Patterns.Add(TokenType.RELATION, regex);
            Tokens.Add(TokenType.RELATION);

            regex = new Regex(@"\G(?i)CONNECTION", RegexOptions.None);
            Patterns.Add(TokenType.CONNECTION, regex);
            Tokens.Add(TokenType.CONNECTION);

            regex = new Regex(@"\G(?i)PARAMETER", RegexOptions.None);
            Patterns.Add(TokenType.PARAMETER, regex);
            Tokens.Add(TokenType.PARAMETER);

            regex = new Regex(@"\G(?i)COMPUTED", RegexOptions.None);
            Patterns.Add(TokenType.COMPUTED, regex);
            Tokens.Add(TokenType.COMPUTED);

            regex = new Regex(@"\G(?i)IN", RegexOptions.None);
            Patterns.Add(TokenType.IN, regex);
            Tokens.Add(TokenType.IN);


        }

        public void Init(string input)
        {
            this.Input = input;
            StartPos = 0;
            EndPos = 0;
            CurrentLine = 0;
            CurrentColumn = 0;
            CurrentPosition = 0;
            LookAheadToken = null;
        }

        public Token GetToken(TokenType type)
        {
            Token t = new Token(this.StartPos, this.EndPos);
            t.Type = type;
            return t;
        }

         /// <summary>
        /// executes a lookahead of the next token
        /// and will advance the scan on the input string
        /// </summary>
        /// <returns></returns>
        public Token Scan(params TokenType[] expectedtokens)
        {
            Token tok = LookAhead(expectedtokens); // temporarely retrieve the lookahead
            LookAheadToken = null; // reset lookahead token, so scanning will continue
            StartPos = tok.EndPos;
            EndPos = tok.EndPos; // set the tokenizer to the new scan position
            return tok;
        }

        /// <summary>
        /// returns token with longest best match
        /// </summary>
        /// <returns></returns>
        public Token LookAhead(params TokenType[] expectedtokens)
        {
            int i;
            int startpos = StartPos;
            Token tok = null;
            List<TokenType> scantokens;


            // this prevents double scanning and matching
            // increased performance
            if (LookAheadToken != null 
                && LookAheadToken.Type != TokenType._UNDETERMINED_ 
                && LookAheadToken.Type != TokenType._NONE_) return LookAheadToken;

            // if no scantokens specified, then scan for all of them (= backward compatible)
            if (expectedtokens.Length == 0)
                scantokens = Tokens;
            else
            {
                scantokens = new List<TokenType>(expectedtokens);
                scantokens.AddRange(SkipList);
            }

            do
            {

                int len = -1;
                TokenType index = (TokenType)int.MaxValue;
                //VVV
                //string input = Input.Substring(startpos);

                tok = new Token(startpos, EndPos);

                for (i = 0; i < scantokens.Count; i++)
                {
                    Regex r = Patterns[scantokens[i]];
                    //VVV
                    //Match m = r.Match(input);
                    Match m = r.Match(Input, startpos);
                    //if (m.Success && m.Index == 0 && ((m.Length > len) || (scantokens[i] < index && m.Length == len )))
                    if (m.Success && m.Index == /*0*/ startpos && ((m.Length > len) || (scantokens[i] < index && m.Length == len )))
                    {
                        len = m.Length;
                        index = scantokens[i];  
                    }
                }

                if (index >= 0 && len >= 0)
                {
                    tok.EndPos = startpos + len;
                    tok.Text = Input.Substring(tok.StartPos, len);
                    tok.Type = index;
                }
                else if (tok.StartPos < tok.EndPos - 1)
                {
                    tok.Text = Input.Substring(tok.StartPos, 1);
                }

                if (SkipList.Contains(tok.Type))
                {
                    startpos = tok.EndPos;
                    Skipped.Add(tok);
                }
                else
                {
                    // only assign to non-skipped tokens
                    tok.Skipped = Skipped; // assign prior skips to this token
                    Skipped = new List<Token>(); //reset skips
                }
            }
            while (SkipList.Contains(tok.Type));

            LookAheadToken = tok;
            return tok;
        }
    }

    #endregion

    #region Token

    public enum TokenType
    {

            //Non terminal tokens:
            _NONE_  = 0,
            _UNDETERMINED_= 1,

            //Non terminal tokens:
            Start   = 2,
            COMPUTED_RETURNTYPE= 3,
            Command = 4,
            InsertFile= 5,
            ViewFile= 6,
            FormatCondition= 7,
            ComputedColumn= 8,
            Table   = 9,
            Relation= 10,
            Connection= 11,
            Parameter= 12,
            ObjectName= 13,
            ColumnName= 14,
            TableName= 15,
            TableWithColumns= 16,
            RelationName= 17,
            ConnectionName= 18,
            ParameterName= 19,
            FormatFilter= 20,
            PropertyName= 21,
            PropertyValue= 22,
            Property= 23,

            //Terminal tokens:
            EOF     = 24,
            WHITESPACE= 25,
            COMMENTLINE= 26,
            COMMENTBLOCK= 27,
            NUMBER  = 28,
            PLUSMINUS= 29,
            MULTDIV = 30,
            BR_OPEN = 31,
            BR_CLOSE= 32,
            COMMA   = 33,
            SEMICOLON= 34,
            DEFICE  = 35,
            IDENT   = 36,
            IDENT_BRACED= 37,
            IDENT_QUOTED= 38,
            IDENT_STRING= 39,
            IDENT_STRING2= 40,
            COMPARE_EQUAL= 41,
            COMPARE_NOT_EQUAL= 42,
            COMPARE_LESS= 43,
            COMPARE_GREATER= 44,
            COMPARE_LESS_OR_EQUAL= 45,
            COMPARE_GREATER_OR_EQUAL= 46,
            COMPARE_BETWEEN= 47,
            COMPARE_CONTAINS= 48,
            COMPARE_STARTS= 49,
            COMPARE_ENDS= 50,
            COMPARE_MATCHES= 51,
            STRING  = 52,
            INTEGER = 53,
            DECIMAL = 54,
            DATETIME= 55,
            BOOLEAN = 56,
            INSERT  = 57,
            FILE    = 58,
            OUTPUT_TYPE= 59,
            FORMAT  = 60,
            CONDITION= 61,
            WITH    = 62,
            FOR     = 63,
            COLUMN  = 64,
            VIEW    = 65,
            TABLE   = 66,
            RELATION= 67,
            CONNECTION= 68,
            PARAMETER= 69,
            COMPUTED= 70,
            IN      = 71
    }

    public class Token
    {
        private int startpos;
        private int endpos;
        private string text;
        private object value;

        // contains all prior skipped symbols
        private List<Token> skipped;

        public int StartPos { 
            get { return startpos;} 
            set { startpos = value; }
        }

        public int Length { 
            get { return endpos - startpos;} 
        }

        public int EndPos { 
            get { return endpos;} 
            set { endpos = value; }
        }

        public string Text { 
            get { return text;} 
            set { text = value; }
        }

        public List<Token> Skipped { 
            get { return skipped;} 
            set { skipped = value; }
        }
        public object Value { 
            get { return value;} 
            set { this.value = value; }
        }

        [XmlAttribute]
        public TokenType Type;

        public Token()
            : this(0, 0)
        {
        }

        public Token(int start, int end)
        {
            Type = TokenType._UNDETERMINED_;
            startpos = start;
            endpos = end;
            Text = ""; // must initialize with empty string, may cause null reference exceptions otherwise
            Value = null;
        }

        public void UpdateRange(Token token)
        {
            if (token.StartPos < startpos) startpos = token.StartPos;
            if (token.EndPos > endpos) endpos = token.EndPos;
        }

        public override string ToString()
        {
            if (Text != null)
                return Type.ToString() + " '" + Text + "'";
            else
                return Type.ToString();
        }
    }

    #endregion
}